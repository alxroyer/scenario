.. Copyright 2020-2023 Alexis Royer <https://github.com/alxroyer/scenario>
..
.. Licensed under the Apache License, Version 2.0 (the "License");
.. you may not use this file except in compliance with the License.
.. You may obtain a copy of the License at
..
..     http://www.apache.org/licenses/LICENSE-2.0
..
.. Unless required by applicable law or agreed to in writing, software
.. distributed under the License is distributed on an "AS IS" BASIS,
.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
.. See the License for the specific language governing permissions and
.. limitations under the License.


.. _coding-rules.documentation.reexports:

Reexports
=========

Documenting a '__init__.py' file that exports symbols from neighbour modules is a pain with `autodoc`.

This section does not really describe a rule, but rather tracks the history of our observations on that topic:

- We first considered documenting exported symbols as regular module attributes:

  - Imported members, i.e. exported members are not documented by default.

  - According to `sphinx#4372 <https://github.com/sphinx-doc/sphinx/issues/4372>`_,
    we should have added the `:imported-members:` option in the 'doc/src/py/scenario.rst' output file:

    .. code-block:: rst

        .. automodule:: scenario
           :members:
           :imported-members:
           :undoc-members:
           :show-inheritance:

  - Instead of that, since the 'doc/src/py/scenario.rst' was automatically generated by `sphinx-apidoc`,
    we eventually decided to manually document the exported symbols in 'src/scenario/__init__.py'
    by extending ``__doc__`` with explicit ReStructuredText ``.. py:attribute::`` directives "as aliases to the inner items",
    "which [let] us define documentation sections by the way".

  - However, since this caused "duplicate object description" errors,
    we hid those in `sphinx-build` output with 'mkdoc.py'.

- Then, with `enhancement #77 <https://github.com/alxroyer/scenario/issues/77>`_),
  we added ``__all__`` export declarations for typing considerations in 'src/scenario/__init__.py'
  (see :ref:`reexports coding rules <coding-rules.py.reexports>`).

  - As soon as a ``__all__`` list is declared, things change a bit with Sphinx:

    - For each exported symbol declared in ``__all__``,
      Sphinx automatically repeats the documentation defined in the privte module
      at the end of the output documentation page for the module (our :py:mod:`scenario` package).

    - Since we generate the documentation for private modules in separate pages,
      this additional documentation eventually comes to be a duplication of the one defined in private modules.

      .. note::
          Actually, it seems we can't get rid of generating the documentation for private modules,
          otherwise the output documentation has lots of missing references.

    - This additional documentation comes unordered, compared with the grouping in sections we had done before.

    - Moreover, Sphinx sets non-desired "alias of" lines in the output documentation for renamed class exports
      (see https://stackoverflow.com/questions/38765577/overriding-sphinx-autodoc-alias-of-for-import-of-private-class
      for a Q&A on how to get rid of these "alias of" in the output documentation).

    - Errors come up also:

      - a couple of "Inline emphasis start-string without end-string",
      - lots of "WARNING: more than one target found for cross-reference" errors,
        eg: "'KnownIssue': scenario.KnownIssue, scenario._knownissues.KnownIssue".

  - In order to solve these issues, we adopted the following strategy for 'src/scenario/__init__.py':

    - Deactivation of module member documentation:
      ``:(xxx-)member:`` `autodoc` options removed in 'doc/src/py/scenario.rst' after `sphinx-apidoc` execution.

    - Short introductions only (instead of ``.. py:attribute::`` documentations) for exported symbols,
      with cross-references to private module documentations.

  - When we activated warnings, we figured out that we had a number of missing references for `scenario.Scenario`, `scenario.logging`...

    - Module member documentation being still deactivated,
      we eventually set back ``.. py:attribute::`` documentations for exported symbols in the module docstring of 'src/scenario/__init__.py'.
