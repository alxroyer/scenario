# Copyright 2020-2023 Alexis Royer <https://github.com/alxroyer/scenario>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Comments saved from https://mypy.readthedocs.io/en/stable/config_file.html on 2020/04/23.

[mypy]
    # === Import discovery ===

        # ----------------------------------------
        # mypy_path (string)
        # ----------------------------------------
        # Specifies the paths to use, after trying the paths from MYPYPATH environment variable. Useful if you’d like to keep stubs in your repo, along with the
        # config file. Multiple paths are always separated with a : or , regardless of the platform. User home directory and environment variables will be
        # expanded.
        #
        # This option may only be set in the global section ([mypy]).
        #
        # Note: On Windows, use UNC paths to avoid using : (e.g. \\127.0.0.1\X$\MyDir where X is the drive letter).
        # ---
        # scenario: These paths are relative paths from the project root directory.
        #           `tools/checktypes.py` ensures that mypy is executed from the the project root directory.
        mypy_path = src:test/cases:test/data:test/src:tools/src

        # ----------------------------------------
        # files (comma-separated list of strings)
        # ----------------------------------------
        # A comma-separated list of paths which should be checked by mypy if none are given on the command line. Supports recursive file globbing using glob,
        # where * (e.g. *.py) matches files in the current directory and **/ (e.g. **/*.py) matches files in any directories below the current one. User home
        # directory and environment variables will be expanded.
        #
        # This option may only be set in the global section ([mypy]).
        # ---
        # scenario: As long as pkgutil-style namespace packages are not fully supported (mypy#9393),
        #           we cannot check :mod:`scenario.tools` and :mod:`scenario.test`, with ``tools/src/**/*.py`` and ``test/src/**/*.py`` patterns.
        #           If we try to do so, mypy early ends with: "Duplicate module named 'scenario' (also at 'src\scenario\__init__.py')",
        #           which hides all other errors that may exist in the rest of the code.
        #           Nevertheless, if we omit the ``tools/src/scenario/__init__.py`` and the ``test/src/scenario/__init__.py`` files in the list below,
        #           this avoids mypy to fail as described above.
        files =
            bin/*.py,
            src/**/*.py,
            # Do not set ``test/data/**/*.py`` in order not to check 'test/data/errors/' files.
            test/*.py, test/cases/**/*.py, test/data/*.py, test/data/xyz/*.py, test/src/scenario/test/**/*.py,
            tools/*.py, tools/src/scenario/tools/**/*.py, tools/conf/sphinx/conf.py
            # Note: Do not end with a coma after the last term

        # ----------------------------------------
        # namespace_packages (bool, default False)
        # ----------------------------------------
        # Enables PEP 420 style namespace packages. See the corresponding flag for more information.
        #
        # This option may only be set in the global section ([mypy]).
        # ---
        # scenario: Cf. mypy#9393: apparently, with pkgutil-style namespace packages, this option has no effect.
        #           Left by default.

        # ----------------------------------------
        # ignore_missing_imports (bool, default False)
        # ----------------------------------------
        # Suppresses error messages about imports that cannot be resolved.
        #
        # If this option is used in a per-module section, the module name should match the name of the imported module, not the module containing the import
        # statement.
        # ---
        # scenario: Strict typings, set to False in the global section.
        ignore_missing_imports = False

        # ----------------------------------------
        # follow_imports (string, default normal)
        # ----------------------------------------
        # Directs what to do with imports when the imported module is found as a .py file and not part of the files, modules and packages provided on the
        # command line.
        #
        # The four possible values are normal, silent, skip and error. For explanations see the discussion for the –follow-imports command line flag.
        #
        # If this option is used in a per-module section, the module name should match the name of the imported module, not the module containing the import
        # statement.
        # ---
        # scenario: `normal` is a convenient option.
        follow_imports = normal

        # ----------------------------------------
        # follow_imports_for_stubs (bool, default False)
        # ----------------------------------------
        # Determines whether to respect the follow_imports setting even for stub (.pyi) files.
        #
        # Used in conjunction with follow_imports=skip, this can be used to suppress the import of a module from typeshed, replacing it with Any.
        #
        # Used in conjunction with follow_imports=error, this can be used to make any use of a particular typeshed module an error.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # python_executable (string)
        # ----------------------------------------
        # Specifies the path to the Python executable to inspect to collect a list of available PEP 561 packages. User home directory and environment variables
        # will be expanded. Defaults to the executable used to run mypy.
        #
        # This option may only be set in the global section ([mypy]).
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # no_silence_site_packages (bool, default False)
        # ----------------------------------------
        # Enables reporting error messages generated within PEP 561 compliant packages. Those error messages are suppressed by default, since you are usually
        # not able to control errors in 3rd party code.
        #
        # This option may only be set in the global section ([mypy]).
        # ---
        # scenario: Left by default.

    # === Platform configuration ===

        # ----------------------------------------
        # python_version (string)
        # ----------------------------------------
        # Specifies the Python version used to parse and check the target program. The string should be in the format DIGIT.DIGIT – for example 2.7. The default
        # is the version of the Python interpreter used to run mypy.
        #
        # This option may only be set in the global section ([mypy]).
        # ---
        # scenario: Set to 3.6, which version is estimated as the first fair and stable python3 version.
        python_version = 3.6

        # ----------------------------------------
        # platform (string)
        # ----------------------------------------
        # Specifies the OS platform for the target program, for example darwin or win32 (meaning OS X or Windows, respectively). The default is the current
        # platform as revealed by Python’s sys.platform variable.
        #
        # This option may only be set in the global section ([mypy]).
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # always_true (comma-separated list of strings)
        # ----------------------------------------
        # Specifies a list of variables that mypy will treat as compile-time constants that are always true.
        # ---
        # scenario: Not set.

        # ----------------------------------------
        # always_false (comma-separated list of strings)
        # ----------------------------------------
        # Specifies a list of variables that mypy will treat as compile-time constants that are always false.
        # ---
        # scenario: Not set.

    # === Disallow dynamic typing ===

        # ----------------------------------------
        # disallow_any_unimported (bool, default False)
        # ----------------------------------------
        # Disallows usage of types that come from unfollowed imports (anything imported from an unfollowed import is automatically given a type of Any).
        # ---
        # scenario: Using `Any` from unfollowed imports is convenient.
        allow_any_unimported = True

        # ----------------------------------------
        # disallow_any_expr (bool, default False)
        # ----------------------------------------
        # Disallows all expressions in the module that have type Any.
        # ---
        # scenario: `Any` sometimes can't be avoided.
        allow_any_expr = True

        # ----------------------------------------
        # disallow_any_decorated (bool, default False)
        # ----------------------------------------
        # Disallows functions that have Any in their signature after decorator transformation.
        # ---
        # scenario: Decorated methods may have `Any` parameters.
        allow_any_decorated = True

        # ----------------------------------------
        # disallow_any_explicit (bool, default False)
        # ----------------------------------------
        # Disallows explicit Any in type positions such as type annotations and generic type parameters.
        # ---
        # scenario: `Any` sometimes can't be avoided.
        allow_any_explicit = True

        # ----------------------------------------
        # disallow_any_generics (bool, default False)
        # ----------------------------------------
        # Disallows usage of generic types that do not specify explicit type parameters.
        # ---
        # scenario: Strict typings, avoid `Any` in generics.
        allow_any_generics = False

        # ----------------------------------------
        # disallow_subclassing_any (bool, default False)
        # ----------------------------------------
        # Disallows subclassing a value of type Any.
        # ---
        # scenario: Strict typings, avoid subclassing `Any`.
        allow_subclassing_any = False

    # === Untyped definitions and calls ===

        # ----------------------------------------
        # disallow_untyped_calls (bool, default False)
        # ----------------------------------------
        # Disallows calling functions without type annotations from functions with type annotations.
        # ---
        # scenario: Scrict typings.
        allow_untyped_calls = False

        # ----------------------------------------
        # disallow_untyped_defs (bool, default False)
        # ----------------------------------------
        # Disallows defining functions without type annotations or with incomplete type annotations.
        # ---
        # scenario: Scrict typings.
        allow_untyped_defs = False

        # ----------------------------------------
        # disallow_incomplete_defs (bool, default False)
        # ----------------------------------------
        # Disallows defining functions with incomplete type annotations.
        # ---
        # scenario: Scrict typings.
        allow_incomplete_defs = False

        # ----------------------------------------
        # check_untyped_defs (bool, default False)
        # ----------------------------------------
        # Type-checks the interior of functions without type annotations.
        # ---
        # scenario: Scrict typings.
        check_untyped_defs = True

        # ----------------------------------------
        # disallow_untyped_decorators (bool, default False)
        # ----------------------------------------
        # Reports an error whenever a function with type annotations is decorated with a decorator without annotations.
        # ---
        # scenario: Scrict typings.
        allow_untyped_decorators = False

    # === None and Optional handling ===

        # ----------------------------------------
        # no_implicit_optional (bool, default False)
        # ----------------------------------------
        # Changes the treatment of arguments with a default value of None by not implicitly making their type Optional.
        # ---
        # scenario: Implicit optional makes the code more readable and not less safe by the way.
        no_implicit_optional = False

        # ----------------------------------------
        # strict_optional (bool, default True)
        # ----------------------------------------
        # Enables or disables strict Optional checks. If False, mypy treats None as compatible with every type.
        #
        # Note: This was False by default in mypy versions earlier than 0.600.
        # ---
        # scenario: Scrict typings.
        strict_optional = True

    # === Configuring warnings ===

        # ----------------------------------------
        # warn_redundant_casts (bool, default False)
        # ----------------------------------------
        # Warns about casting an expression to its inferred type.
        #
        # This option may only be set in the global section ([mypy]).
        # ---
        # scenario: Scrict typings.
        warn_redundant_casts = True

        # ----------------------------------------
        # warn_unused_ignores (bool, default False)
        # ----------------------------------------
        # Warns about unneeded # type: ignore comments.
        # ---
        # scenario: Scrict typings.
        warn_unused_ignores = True

        # ----------------------------------------
        # warn_no_return (bool, default True)
        # ----------------------------------------
        # Shows errors for missing return statements on some execution paths.
        # ---
        # scenario: Scrict typings.
        warn_no_return = True

        # ----------------------------------------
        # warn_return_any (bool, default False)
        # ----------------------------------------
        # Shows a warning when returning a value with type Any from a function declared with a non- Any return type.
        # ---
        # scenario: Scrict typings.
        warn_return_any = True

        # ----------------------------------------
        # warn_unreachable (bool, default False)
        # ----------------------------------------
        # Shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis.
        # ---
        # scenario: Scrict typings.
        warn_unreachable = True

    # === Suppressing errors ===

        # ----------------------------------------
        # show_none_errors (bool, default True)
        # ----------------------------------------
        # Shows errors related to strict None checking, if the global strict_optional flag is enabled.
        # ---
        # scenario: Scrict typings.
        # ---
        # As of mypy v1.0.1, this option does not exist anymore.
        # show_none_errors = True

        # ----------------------------------------
        # ignore_errors (bool, default False)
        # ----------------------------------------
        # Ignores all non-fatal errors.
        # ---
        # scenario: Scrict typings.
        ignore_errors = False

    # === Miscellaneous strictness flags ===

        # ----------------------------------------
        # allow_untyped_globals (bool, default False)
        # ----------------------------------------
        # Causes mypy to suppress errors caused by not being able to fully infer the types of global and class variables.
        # ---
        # scenario: Scrict typings.
        allow_untyped_globals = False

        # ----------------------------------------
        # allow_redefinition (bool, default False)
        # ----------------------------------------
        # Allows variables to be redefined with an arbitrary type, as long as the redefinition is in the same block and nesting level as the original
        # definition.
        # ---
        # scenario: Scrict typings.
        allow_redefinition = False

        # ----------------------------------------
        # implicit_reexport (bool, default True)
        # ----------------------------------------
        # By default, imported values to a module are treated as exported and mypy allows other modules to import them. When false, mypy will not re-export
        # unless the item is imported using from-as or is included in __all__. Note that mypy treats stub files as if this is always disabled. For example:
        # ```
        # # This won't re-export the value
        # from foo import bar
        # # This will re-export it as bar and allow other modules to import it
        # from foo import bar as bar
        # # This will also re-export bar
        # from foo import bar
        # __all__ = ['bar']
        # ```
        # ---
        # scenario: Pattern used.
        implicit_reexport = True

        # ----------------------------------------
        # strict_equality (bool, default False)
        # ----------------------------------------
        # Prohibit equality checks, identity checks, and container checks between non-overlapping types.
        # ---
        # scenario: Scrict typings.
        strict_equality = True

    # === Configuring error messages ===

        # ----------------------------------------
        # show_error_context (bool, default False)
        # ----------------------------------------
        # Prefixes each error with the relevant context.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # show_column_numbers (bool, default False)
        # ----------------------------------------
        # Shows column numbers in error messages.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # show_error_codes (bool, default False)
        # ----------------------------------------
        # Shows error codes in error messages. See Error codes for more information.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # pretty (bool, default False)
        # ----------------------------------------
        # Use visually nicer output in error messages: use soft word wrap, show source code snippets, and show error location markers.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # color_output (bool, default True)
        # ----------------------------------------
        # Shows error messages with color enabled.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # error_summary (bool, default True)
        # ----------------------------------------
        # Shows a short summary line after error messages.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # show_absolute_path (bool, default False)
        # ----------------------------------------
        # Show absolute paths to files.
        # ---
        # scenario: Left by default.

    # === Incremental mode ===

        # ----------------------------------------
        # incremental (bool, default True)
        # ----------------------------------------
        # Enables incremental mode.
        # ---
        # scenario: Incremental speeds up the consecutive calls.
        incremental = True

        # ----------------------------------------
        # cache_dir (string, default .mypy_cache)
        # ----------------------------------------
        # Specifies the location where mypy stores incremental cache info. User home directory and environment variables will be expanded. This setting will be
        # overridden by the MYPY_CACHE_DIR environment variable.
        #
        # Note that the cache is only read when incremental mode is enabled but is always written to, unless the value is set to /dev/null (UNIX) or nul
        # (Windows).
        # ---
        # scenario: Left by default.
        cache_dir = .mypy_cache

        # ----------------------------------------
        # sqlite_cache (bool, default False)
        # ----------------------------------------
        # Use an SQLite database to store the cache.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # cache_fine_grained (bool, default False)
        # ----------------------------------------
        # Include fine-grained dependency information in the cache for the mypy daemon.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # skip_version_check (bool, default False)
        # ----------------------------------------
        # Makes mypy use incremental cache data even if it was generated by a different version of mypy. (By default, mypy will perform a version check and
        # regenerate the cache if it was written by older versions of mypy.)
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # skip_cache_mtime_checks (bool, default False)
        # ----------------------------------------
        # Skip cache internal consistency checks based on mtime.
        # ---
        # scenario: Left by default.

    # === Advanced options ===

        # ----------------------------------------
        # pdb (bool, default False)
        # ----------------------------------------
        # Invokes pdb on fatal error.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # show_traceback (bool, default False)
        # ----------------------------------------
        # Shows traceback on fatal error.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # raise_exceptions (bool, default False)
        # ----------------------------------------
        # Raise exception on fatal error.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # custom_typing_module (string)
        # ----------------------------------------
        # Specifies a custom module to use as a substitute for the typing module.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # custom_typeshed_dir (string)
        # ----------------------------------------
        # Specifies an alternative directory to look for stubs instead of the default typeshed directory. User home directory and environment variables will be
        # expanded.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # warn_incomplete_stub (bool, default False)
        # ----------------------------------------
        # Warns about missing type annotations in typeshed. This is only relevant in combination with disallow_untyped_defs or disallow_incomplete_defs.
        # ---
        # scenario: Strict typings, activated.
        warn_incomplete_stub = True

    # === Report generation ===

        # ----------------------------------------
        # any_exprs_report (string)
        # ----------------------------------------
        # Causes mypy to generate a text file report documenting how many expressions of type Any are present within your codebase.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # cobertura_xml_report (string)
        # ----------------------------------------
        # Causes mypy to generate a Cobertura XML type checking coverage report.
        #
        # You must install the lxml library to generate this report.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # html_report / xslt_html_report (string)
        # ----------------------------------------
        # Causes mypy to generate an HTML type checking coverage report.
        #
        # You must install the lxml library to generate this report.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # linecount_report (string)
        # ----------------------------------------
        # Causes mypy to generate a text file report documenting the functions and lines that are typed and untyped within your codebase.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # linecoverage_report (string)
        # ----------------------------------------
        # Causes mypy to generate a JSON file that maps each source file’s absolute filename to a list of line numbers that belong to typed functions in that
        # file.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # lineprecision_report (string)
        # ----------------------------------------
        # Causes mypy to generate a flat text file report with per-module statistics of how many lines are typechecked etc.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # txt_report / xslt_txt_report (string)
        # ----------------------------------------
        # Causes mypy to generate a text file type checking coverage report.
        #
        # You must install the lxml library to generate this report.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # xml_report (string)
        # ----------------------------------------
        # Causes mypy to generate an XML type checking coverage report.
        #
        # You must install the lxml library to generate this report.
        # ---
        # scenario: Left by default.

    # === Miscellaneous ===

        # ----------------------------------------
        # junit_xml (string)
        # ----------------------------------------
        # Causes mypy to generate a JUnit XML test result document with type checking results. This can make it easier to integrate mypy with continuous integration (CI) tools.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # scripts_are_modules (bool, default False)
        # ----------------------------------------
        # Makes script x become module x instead of __main__. This is useful when checking multiple scripts in a single run.
        # ---
        # scenario: Left by default.

        # ----------------------------------------
        # warn_unused_configs (bool, default False)
        # ----------------------------------------
        # Warns about per-module sections in the config file that do not match any files processed when invoking mypy. (This requires turning off incremental mode using incremental = False.)
        # ---
        # scenario: Useful to debug this configuration file.
        warn_unused_configs = True

        # ----------------------------------------
        # verbosity (integer, default 0)
        # ----------------------------------------
        # Controls how much debug output will be generated. Higher numbers are more verbose.


# Inspired from: https://github.com/python/mypy/issues/3905
[mypy-xml.dom.*]
    ignore_missing_imports = True
